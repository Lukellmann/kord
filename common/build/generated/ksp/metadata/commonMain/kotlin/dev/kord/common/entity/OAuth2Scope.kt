// THIS FILE IS AUTO-GENERATED BY KordEnumProcessor.kt, DO NOT EDIT!
@file:Suppress(names = arrayOf("RedundantVisibilityModifier", "IncorrectFormatting",
                "ReplaceArrayOfWithLiteral", "SpellCheckingInspection", "GrazieInspection"))

package dev.kord.common.entity

import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.LazyThreadSafetyMode.PUBLICATION
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * See [OAuth2Scope]s in the
 * [Discord Developer Documentation](https://discord.com/developers/docs/topics/oauth2#shared-resources-oauth2-scopes).
 */
@Serializable(with = OAuth2Scope.Serializer::class)
public sealed class OAuth2Scope(
    /**
     * The raw name used by Discord.
     */
    public val name: String,
) {
    public final override fun equals(other: Any?): Boolean = this === other ||
            (other is OAuth2Scope && this.name == other.name)

    public final override fun hashCode(): Int = name.hashCode()

    public final override fun toString(): String =
            "OAuth2Scope.${this::class.simpleName}(name=$name)"

    /**
     * An unknown [OAuth2Scope].
     *
     * This is used as a fallback for [OAuth2Scope]s that haven't been added to Kord yet.
     */
    public class Unknown(
        name: String,
    ) : OAuth2Scope(name)

    /**
     * Allows your app to fetch data from a user's "Now Playing/Recently Played" list - not
     * currently available for apps.
     */
    public object ActivitiesRead : OAuth2Scope("activities.read")

    /**
     * Allows your app to update a user's activity - requires Discord approval.
     */
    public object ActivitiesWrite : OAuth2Scope("activities.write")

    /**
     * Allows your app to read build data for a user's applications.
     */
    public object ApplicationsBuildsRead : OAuth2Scope("applications.builds.read")

    /**
     * Allows your app to upload/update builds for a user's applications - requires Discord
     * approval.
     */
    public object ApplicationsBuildsUpload : OAuth2Scope("applications.builds.upload")

    /**
     * Allows your app to use commands in a guild.
     */
    public object ApplicationsCommands : OAuth2Scope("applications.commands")

    /**
     * Allows your app to update its commands using a Bearer token -
     * [client credentials grant](https://discord.com/developers/docs/topics/oauth2#client-credentials-grant)
     * only.
     */
    public object ApplicationsCommandsUpdate : OAuth2Scope("applications.commands.update")

    /**
     * Allows your app to update permissions for its commands in a guild a user has permissions to.
     */
    public object ApplicationsCommandsPermissionsUpdate :
            OAuth2Scope("applications.commands.permissions.update")

    /**
     * Allows your app to read entitlements for a user's applications.
     */
    public object ApplicationsEntitlements : OAuth2Scope("applications.entitlements")

    /**
     * Allows your app to read and update store data (SKUs, store listings, achievements, etc.) for
     * a user's applications.
     */
    public object ApplicationsStoreUpdate : OAuth2Scope("applications.store.update")

    /**
     * For OAuth2 bots, this puts the bot in the user's selected guild by default.
     */
    public object Bot : OAuth2Scope("bot")

    /**
     * Allows `/users/@me/connections` to return linked third-party accounts.
     */
    public object Connections : OAuth2Scope("connections")

    /**
     * Allows your app to see information about the user's DMs and group DMs - requires Discord
     * approval.
     */
    public object DmChannelsRead : OAuth2Scope("dm_channels.read")

    /**
     * Enables `/users/@me` to return an `email`.
     */
    public object Email : OAuth2Scope("email")

    /**
     * Allows your app to join users to a group dm.
     */
    public object GdmJoin : OAuth2Scope("gdm.join")

    /**
     * Allows `/users/@me/guilds` to return basic information about all of a user's guilds.
     */
    public object Guilds : OAuth2Scope("guilds")

    /**
     * Allows `/guilds/{guild.id}/members/{user.id}` to be used for joining users to a guild.
     */
    public object GuildsJoin : OAuth2Scope("guilds.join")

    /**
     * Allows `/users/@me/guilds/{guild.id}/member` to return a user's member information in a
     * guild.
     */
    public object GuildsMembersRead : OAuth2Scope("guilds.members.read")

    /**
     * Allows `/users/@me` without `email`.
     */
    public object Identify : OAuth2Scope("identify")

    /**
     * For local rpc server api access, this allows you to read messages from all client channels
     * (otherwise restricted to channels/guilds your app creates).
     */
    public object MessagesRead : OAuth2Scope("messages.read")

    /**
     * Allows your app to know a user's friends and implicit relationships - requires Discord
     * approval.
     */
    public object RelationshipsRead : OAuth2Scope("relationships.read")

    /**
     * Allows your app to update a user's connection and metadata for the app.
     */
    public object RoleConnectionsWrite : OAuth2Scope("role_connections.write")

    /**
     * For local rpc server access, this allows you to control a user's local Discord client -
     * requires Discord approval.
     */
    public object Rpc : OAuth2Scope("rpc")

    /**
     * For local rpc server access, this allows you to update a user's activity - requires Discord
     * approval.
     */
    public object RpcActivitiesWrite : OAuth2Scope("rpc.activities.write")

    /**
     * For local rpc server access, this allows you to receive notifications pushed out to the
     * user - requires Discord approval.
     */
    public object RpcNotificationsRead : OAuth2Scope("rpc.notifications.read")

    /**
     * For local rpc server access, this allows you to read a user's voice settings and listen for
     * voice events - requires Discord approval.
     */
    public object RpcVoiceRead : OAuth2Scope("rpc.voice.read")

    /**
     * For local rpc server access, this allows you to update a user's voice settings - requires
     * Discord approval.
     */
    public object RpcVoiceWrite : OAuth2Scope("rpc.voice.write")

    /**
     * Allows your app to connect to voice on user's behalf and see all the voice members - requires
     * Discord approval.
     */
    public object Voice : OAuth2Scope("voice")

    /**
     * This generates a webhook that is returned in the oauth token response for authorization code
     * grants.
     */
    public object WebhookIncoming : OAuth2Scope("webhook.incoming")

    internal object Serializer : KSerializer<OAuth2Scope> {
        public override val descriptor: SerialDescriptor =
                PrimitiveSerialDescriptor("dev.kord.common.entity.OAuth2Scope",
                PrimitiveKind.STRING)

        public override fun serialize(encoder: Encoder, `value`: OAuth2Scope) =
                encoder.encodeString(value.name)

        public override fun deserialize(decoder: Decoder) =
                when (val name = decoder.decodeString()) {
            "activities.read" -> ActivitiesRead
            "activities.write" -> ActivitiesWrite
            "applications.builds.read" -> ApplicationsBuildsRead
            "applications.builds.upload" -> ApplicationsBuildsUpload
            "applications.commands" -> ApplicationsCommands
            "applications.commands.update" -> ApplicationsCommandsUpdate
            "applications.commands.permissions.update" -> ApplicationsCommandsPermissionsUpdate
            "applications.entitlements" -> ApplicationsEntitlements
            "applications.store.update" -> ApplicationsStoreUpdate
            "bot" -> Bot
            "connections" -> Connections
            "dm_channels.read" -> DmChannelsRead
            "email" -> Email
            "gdm.join" -> GdmJoin
            "guilds" -> Guilds
            "guilds.join" -> GuildsJoin
            "guilds.members.read" -> GuildsMembersRead
            "identify" -> Identify
            "messages.read" -> MessagesRead
            "relationships.read" -> RelationshipsRead
            "role_connections.write" -> RoleConnectionsWrite
            "rpc" -> Rpc
            "rpc.activities.write" -> RpcActivitiesWrite
            "rpc.notifications.read" -> RpcNotificationsRead
            "rpc.voice.read" -> RpcVoiceRead
            "rpc.voice.write" -> RpcVoiceWrite
            "voice" -> Voice
            "webhook.incoming" -> WebhookIncoming
            else -> Unknown(name)
        }
    }

    public companion object {
        /**
         * A [List] of all known [OAuth2Scope]s.
         */
        public val entries: List<OAuth2Scope> by lazy(mode = PUBLICATION) {
            listOf(
                ActivitiesRead,
                ActivitiesWrite,
                ApplicationsBuildsRead,
                ApplicationsBuildsUpload,
                ApplicationsCommands,
                ApplicationsCommandsUpdate,
                ApplicationsCommandsPermissionsUpdate,
                ApplicationsEntitlements,
                ApplicationsStoreUpdate,
                Bot,
                Connections,
                DmChannelsRead,
                Email,
                GdmJoin,
                Guilds,
                GuildsJoin,
                GuildsMembersRead,
                Identify,
                MessagesRead,
                RelationshipsRead,
                RoleConnectionsWrite,
                Rpc,
                RpcActivitiesWrite,
                RpcNotificationsRead,
                RpcVoiceRead,
                RpcVoiceWrite,
                Voice,
                WebhookIncoming,
            )
        }

    }
}
